##############################################################################
#
#   MRC FGU CGAT
#
#   $Id$
#
#   Copyright (C) 2009 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
###############################################################################
"""===========================
Pipeline Germline Variant Calling
===========================

:Author: Jacob Parker
:Release: $Id$
:Date: |today|
:Tags: Python

.. Replace the documentation below with your own description of the
   pipeline's purpose

Overview
========

This pipeline computes the word frequencies in the configuration
files :file:``pipeline.ini` and :file:`conf.py`.

Usage
=====

See ref`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.ini` file.
CGATReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_rnaseqmismatches.py config

Input files
-----------

None required except the pipeline configuration files.

Requirements
------------

The pipeline requires the results from
:doc:`pipeline_annotations`. Set the configuration variable
:py:data:`annotations_database` and :py:data:`annotations_dir`.

On top of the default CGAT setup, the pipeline requires the following
software to be in the path:

.. Add any additional external requirements such as 3rd party software
   or R modules below:

Requirements:

* samtools >= 1.1

Pipeline output
===============

.. Describe output files of the pipeline here

Glossary
========

.. glossary::


Code
====

"""
from ruffus import *

import sys
import os
import sqlite3
import CGATCore.Experiment as E
from CGATCore import Pipeline as P
import re

# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
     "../pipeline.yml",
     "pipeline.yml"])

PARAMS["projectsrc"] = os.path.dirname(__file__)
#for key, value in PARAMS.iteritems():
#    print "%s:\t%s" % (key,value)


# add configuration values from associated pipelines
#
# 1. pipeline_annotations: any parameters will be added with the
#    prefix "annotations_". The interface will be updated with
#    "annotations_dir" to point to the absolute path names.

PARAMS.update(P.peek_parameters(
    PARAMS["annotations_dir"],
    'genesets',
    prefix="annotations_",
    update_interface=True,
    restrict_interface=True))

# if necessary, update the PARAMS dictionary in any modules file.
# e.g.:
#
# import CGATPipelines.PipelineGeneset as PipelineGeneset
# PipelineGeneset.PARAMS = PARAMS
#
# Note that this is a hack and deprecated, better pass all
# parameters that are needed by a function explicitely.

# -----------------------------------------------
# Utility functions
def connect():
    '''utility function to connect to database.

    Use this method to connect to the pipeline database.
    Additional databases can be attached here as well.

    Returns an sqlite3 database handle.
    '''

    dbh = sqlite3.connect(PARAMS["database"])
    statement = '''ATTACH DATABASE '%s' as annotations''' % (
        PARAMS["annotations_database"])
    cc = dbh.cursor()
    cc.execute(statement)
    cc.close()

    return dbh


# ---------------------------------------------------
# Specific pipeline tasks

@follows(mkdir("readgroups.dir"))
@transform("input_files.dir/*.bam",formatter(),r"readgroups.dir/{basename[0]}.readgroups.bam")
def add_read_groups(infile, outfile):
    platform = PARAMS["platform"]
    groupsample = P.snip(os.path.basename(infile), ".bam")
    statement = '''java -Xmx8G -jar /shared/sudlab1/General/apps/bio/picard-tools-1.135/picard.jar
                   AddOrReplaceReadGroups
                   I=%(infile)s
                   O=%(outfile)s
                   RGLB=lib1
                   RGPL=%(platform)s
                   RGPU=unit1
                   RGSM=%(groupsample)s'''

    job_memory = "16G"
    P.run(statement)



@follows(mkdir("deduped.dir"))
@transform(add_read_groups,
           regex(r"readgroups.dir/(.+).readgroups.bam"),
           r"deduped.dir/\1.bam")
def dedup_bams(infile, outfile):
    '''Use MarkDuplicates to mark dupliceate reads'''
    job_memory = "16G"

    tempfile=P.snip(outfile, ".bam") + ".temp.bam"   
    metrics=P.snip(outfile, ".bam") + ".metrics.tsv"
    temporary = PARAMS["tmpdir"]
    statement = '''MarkDuplicates I=%(infile)s
                                  O=%(tempfile)s
                                  M=%(metrics)s
                                  TMP_DIR=%(temporary)s > %(outfile)s.log;

                                samtools view 
                                -F 1024
                                -b
                                %(tempfile)s
                                > %(outfile)s;
                  
                                rm -r %(tempfile)s;

                                samtools index %(outfile)s'''
    P.run(statement)


@follows(mkdir("split.dir"))
@transform(dedup_bams,regex(r"deduped.dir/(.+).bam"),r"split.dir/\1.split.bam")
def splitbams(infile,outfile):
    '''use GATK splitNcigar to split reads into exon segements'''
    fasta = os.path.join(PARAMS["fasta"],PARAMS["genome"]) + ".fasta"
    fastamap = PARAMS["mapfasta"]
    drctry= PARAMS["tmpdir"]
    statement = '''java -Xmx10G -Djava.io.tmpdir=%(drctry)s -jar /shared/sudlab1/General/git_repositories/GATK_file/GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar 
                   -T SplitNCigarReads 
                   -R %(fastamap)s
                   -I %(infile)s 
                   -o %(outfile)s 
                   -rf ReassignOneMappingQuality 
                   -RMQF 255 
                   -RMQT 60 
                   -U ALLOW_N_CIGAR_READS
                                      '''

   
    job_memory = "32G"
    P.run(statement)

#@follows(mkdir("BaseRecalibration.dir"))
#@transform(splitbams,regex(r"split.dir/(.+).split.bam"),r"BaseRecalibration.dir/\1.recal.bam")
#def baserecal(infile,outfile):
#    fasta = os.path.join(PARAMS["fasta"],PARAMS["genome"]) + ".fasta"
#    fastamap = PARAMS["mapfasta"]
#    drctry= PARAMS["tmpdir"]
#    statement = '''java -Xmx10G -Djava.io.tmpdir=%(drctry)s -jar ~/Downloads/GenomeAnalysisTK-3.8-0-ge9d806836/GenomeAnalysisTK.jar 
#                   -T BaseRecalibrator
#                   -R %(fastamap)s
#                   -I %(infile)s 
#                   -o %(outfile)s
#                   '''
#  
#    job_memory = "12G"
#    P.run(statement)
             

#fasta = os.path.join(PARAMS["fasta"],PARAMS["genome"]) + ".fasta"

@follows(mkdir("Variantcalls.dir"))
@transform(splitbams,regex(r"split.dir/(.+).split.bam"),r"Variantcalls.dir/\1.vcf.gz")
def variantcalling(infile,outfile):
    fasta = os.path.join(PARAMS["fasta"],PARAMS["genome"]) + ".fasta"
    fastamap = PARAMS["mapfasta"]
    drctry= PARAMS["tmpdir"]
    tempfile=P.snip(outfile,".gz")
    statement = '''java -Xmx10G -Djava.io.tmpdir=%(drctry)s -jar /shared/sudlab1/General/git_repositories/GATK_file/GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar 
                   -T HaplotypeCaller
                   -R %(fastamap)s 
                   -I %(infile)s 
                   -dontUseSoftClippedBases 
                   -stand_call_conf 10.0
                   --dbsnp /shared/sudlab1/General/projects/Sumeet/dbSNP/All_20180418_chr.vcf.gz
                   -o %(tempfile)s &&
                   bgzip -c %(tempfile)s > %(outfile)s &&
                   tabix -p vcf %(outfile)s
                   '''  

    job_memory = "16G"
    P.run(statement)         
      
@follows(mkdir("phased.dir"))
@transform(variantcalling, regex(r"Variantcalls.dir/(.+).vcf.gz"),
           add_inputs(r"split.dir/\1.split.bam"),
           r"phased.dir/\1.vcf.gz")
def phasevariants(infiles, outfile):
    vcf, bam = infiles
    fastamap = PARAMS["mapfasta"]
    drctry= PARAMS["tmpdir"]
#    tempfile=P.snip(outfile,".gz")
    statement = ''' java -Xmx10g -Djava.io.tmpdir=%(drctry)s -jar /shared/sudlab1/General/git_repositories/GATK_file/GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar 
                          -T ReadBackedPhasing
                          -R %(fastamap)s
                          -I %(bam)s
                          --variant %(vcf)s
                          -L %(vcf)s
                          -o %(outfile)s
                          --phaseQualityThresh 20.0
                          '''
    
    job_memory = "16G"
    P.run(statement)



@follows(mkdir("Filter_vcf.dir"))
@transform(phasevariants,regex(r"phased.dir/(.+).vcf.gz"),r"Filter_vcf.dir/\1.vcf")
def filtering(infile,outfile):
    statement = ''' bcftools view
                    --max-alleles 2
                    --exclude-types indels
                    %(infile)s
                    -o%(outfile)s '''
    job_memory = "16G"
    P.run(statement)

@follows(filtering,mkdir("patient_genomes.dir"))
@transform(filtering,
           regex("Filter_vcf.dir/(.+).vcf"),
           add_inputs(PARAMS["mapfasta"]),
           r"patient_genomes.dir/\1.fasta")
def generate_patient_genome(infiles, outfile):
    '''This task uses generate_diploid_genome to make a 
    diploid genome specific to each patient'''

    vcf, genome = infiles

    path_to_script = os.path.dirname(__file__)
    statement = ''' python %(path_to_script)s/generate_split_genomes.py
                          --stdin=%(vcf)s
                          --genome-fasta=%(genome)s
                          --log=%(outfile)s.log
                          --stdout=%(outfile)s '''
    job_memory = "8G"
    P.run(statement)

   
@follows(generate_patient_genome)
@transform(generate_patient_genome,
           formatter("patient_genomes.dir/(.+).fasta"),
           "patient_genomes.dir/{basename[0]}.dir")
def patient_genome_index(infiles, outfile):
    '''This task uses STAR to generate indeces for
       every diploid genome specific to each patient'''
    job_threads = 2
    job_memory = "64G"

    infile = infiles
    basefile = os.path.basename(infile)
    statement = ''' mkdir %(outfile)s;
                 STAR  --runMode genomeGenerate
                 --genomeDir %(outfile)s
                 --genomeFastaFiles %(infile)s
                 --sjdbGTFfile /fastdata/md1srd/Projects/dbGaP/allele_imbalance/geneset_all_2genomes.gtf.gz
                 --sjdbOverhang 75 '''

    P.run(statement)


 
# ---------------------------------------------------
# Generic pipeline tasks
@follows(add_read_groups,dedup_bams,splitbams,variantcalling,phasevariants,filtering,generate_patient_genome, patient_genome_index)
def full():
    pass


@follows(mkdir("report"))
def build_report():
    '''build report from scratch.

    Any existing report will be overwritten.
    '''

    E.info("starting report build process from scratch")
    P.run_report(clean=True)


@follows(mkdir("report"))
def update_report():
    '''update report.

    This will update a report with any changes inside the report
    document or code. Note that updates to the data will not cause
    relevant sections to be updated. Use the cgatreport-clean utility
    first.
    '''

    E.info("updating report")
    P.run_report(clean=False)


@follows(update_report)
def publish_report():
    '''publish report in the CGAT downloads directory.'''

    E.info("publishing report")
    P.publish_report()

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
